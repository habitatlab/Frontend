import React, { useState, useEffect } from 'react'
import { useROS, getTopics, changeUrl } from './ROS'
import ROSLIB from 'roslib'
import {
  Col,
  Button,
  Row,
  Input,
  Card,
  CardBody,
  Table,
  CardTitle,
  CardSubtitle,
  CardImg,
  CardText,
  Container,
} from "reactstrap"

function ShowROSDevices() {
  const { createListener, createPublisher, isConnected, url, topics, toggleConnection, toggleAutoconnect, changeUrl } = useROS();
  const [ topic, setTopic ] = useState('/devices_heartbeat');
  const [ queue, setQueue ] = useState(0);
  const [ devices, setDevices ] = useState([]);
  const [ publisher, setPublisher ] = useState(null);
  const [ listener, setListener ] = useState(null);
  const [ compression, setCompression ] = useState('none');
  var deviceMap = []

  // Try replacing this with your own unique rosbridge webserver address
  const defaultURL = "ws://10.123.1.73:9090";
	
  // only runs once when ToggleConnect is first rendered (mounted)
  useEffect(() => {

     if (topics) {
	 if (!listener) {
         for (var i in topics) {
             if (topics[i].path == topic) {
                 var nlistener = createListener( topics[i].path,
                        topics[i].msgType,
                        Number(queue),
                        compression);
		 setListener(nlistener)
                 break;
             }
         }
	 
	 if (nlistener) {
             console.log("Subscribing to messages...");
             nlistener.subscribe(pollDevices);
         } else {
             console.log("Topic '" + topic + "' not found...make sure to input the full topic path - including the leading '/'");
         }
         }

	 if (!publisher) {
		 var npublisher = createPublisher ( "/device_control",
		  'std_msgs/String');
         if (npublisher) {
	     console.log("Set up Publisher for Device Control....");
	     setPublisher(npublisher)
	 }
         }

      }
  }, [topics, devices])

  const pollDevices = (msg) => {
     var msgObj = JSON.parse(msg.data)
     if (msgObj["camera"]) {
	 deviceMap[msgObj["camera"]] = msgObj 
     }
     var ldevices = [];
     for (var k in deviceMap) ldevices.push(deviceMap[k]);
     setDevices(ldevices)
  }

  function setSelectedCameras(event) {
     console.log(event);
  }

  function handleStartCamera(camera_id) {
     var msgObj = {
          deviceId: camera_id,
          action: "Start"
     };

     var serializedMsg = JSON.stringify(msgObj);
     var rosMsg = new ROSLIB.Message({
           data: serializedMsg
     });

     publisher.publish(rosMsg);
  }

  function handleStopCamera(camera_id) {
     var msgObj = {
          deviceId: camera_id,
          action: "Stop"
     };

     var serializedMsg = JSON.stringify(msgObj);
     var rosMsg = new ROSLIB.Message({
           data: serializedMsg
     });

     publisher.publish(rosMsg);

  }

  useEffect(() => {
    if (url !== defaultURL) {
      changeUrl(defaultURL);
    }

    if (!isConnected) {
      toggleAutoconnect(); 
    }
  },[])

  useEffect(() => {
  },[devices])

    

  return (
    <div>
	  <p>
        <b>Synchronization with Pilot VBS:</b> { isConnected ? "Enabled" : "Disabled" }   <br />
          </p>
	    <Row>
	        <Col><h6>Device</h6></Col>
                <Col><h6>Type</h6></Col>
                <Col><h6>Current State</h6></Col>
	        <Col><h6>Select</h6></Col>
                <Col md={2}><h6>Actions</h6></Col>
            </Row>
	   { devices.map((device, i) => 
              <Row>
		   <Col key={i}>{device.camera}</Col>
		   <Col>Camera</Col>
                   <Col>{device.status}</Col>
		   <Col><Input type="checkbox" onChange={(e)=>setSelectedDevices(e.target.value)}/></Col>
                   <Col>{device.status=='Stopped' ? <Button
                                color="success"
                                className="btn btn-sm btn-primary waves-effect waves-light"
                                onClick={() => {
                                      handleStartCamera(device.camera)
                                        }}

			      >Start Camera</Button> :
		             <div><Button
                                color="error"
                                className="btn btn-sm btn-primary waves-effect waves-light"
			         onClick={() => {
                                      handleStopCamera(device.camera)
                                        }}
                              >Stop Camera</Button>
			   <Button
                                color="primary"
                                className="btn btn-sm btn-primary waves-effect waves-light"
                              >Camera Feed</Button></div>
		      } 
		     </Col>
                     </Row>
            )}
    </div>
  );
}

export default ShowROSDevices;
